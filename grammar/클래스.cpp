#include <iostream>

struct tMY // C++ 에서는 typedef을 안해줘도 된다.
{
};

class CMy
{
    // 접근 제한 지정자
    // private, protected(상속), public

private:
    // 이후 부터는 멤버들 비공개 처리
    int m_i;
    float m_f;

public:
    // 완전 공개처리 (구조체랑 같다)
    int m_ii;

public:
    void SetInt(int i) // 클래스 CMy 에서만 사용 가능한 함수이며,
    {                  // i값을 셋팅하면 멤버 m_i에 값을 넣어주는 함수다.
        m_i = i;       // 디스포인터 : 해당 멤버 함수를 호출한 객체의 주소타입
                       // this->m_i=i; 에서 this-> 가 생략되어 있는 것 이다.
    }                  // 로컬(현재 호출된 지역변수를 보여줌)에서 확인 가능하다.

    // 대입 연산자
    CMy &operator=(const CMy &_Other) // 규칙, operator함수의  클래스쪽에 대입 연산자가
    {                                 // 발생했을 때 호출되는 함수다.
        this->m_i = _Other.m_i;       // Other는 c2를 참조해서 const로 받아온 것
        this->m_f = _Other.m_f;

        return *this; // *(포인터) 주소 타입이니까 *로 접근해야 원본의 객체 c2를 가리키고
    }                 // 그 c2를 참조해서 되돌려 준다. (CMy& 로 반환한 이유)

public:
    // 생성자 (반환 타입 X)
    // 이니셜라이져 제공 (초기화 기능)
    // 초기화 : 객체가 만들어짐과 동시에 값을 주어진 것 이다.
     CMy()
         : m_i(100)
         , m_f(0.f)
     {
     }

     // 소멸자
     ~CMy()
     {
     }
};

int main()
{
    // C++ 클래스 특징
    // 접근제한 지정자
    // 클래스 내의 멤버변수 or 멤버함수의 접근 레벨

    // 생성자, 소멸자
    // 객체 생성, 소멸 시 자동으로 호출
    // 직접 만들지 않으면 기본 생성자, 기본 소멸자가 만들어짐

    // 멤버함수
    // 해당 클래스가 사용하는 전용 함수
    // 해당 클래스의 객체가 필요함 / EX) CMy c.SetInt();
    // 멤버함수를 객체를 통해서 호출하면, 해당 객체의 주소가 this 포인터로 전달된다.

    {
        // 레퍼런스
        // 자료형 * 변수명;     이러한 자료형 포인터 (포인터 변수 선언)
        // *포인터변수;         포인터 변수에 저장된 주소를 역참조
        // &변수;               선언 이후에 &변수를 할 시 본인의 주소값을 반환
        // 자료형 & 변수명;     레퍼런스 변수 선언 (C++에서 넘어오면서 원본접근 기능 추가됨)

        // C++ 에 추가된 기능
        // 포인터와 유사
        // 원본을 참조한다.
        // 참조변수를 통해서 직접적으로 원본을 수정 할 수 있다.

        int a = 10;
        int *const p = &a;
        *p = 100;

        int &iRef = a; // iRef가 a라는 변수를 참조해서
        iRef = 100;    // 수정을 하는게 곧 a 변수를 수정함을 의미
    }
    
    CMy c;
    // 디스어셈블리를 보면, 객체가 만들어질 때 생성자 자동 호출된다.
    // 컴파일러가 생성자 함수를 호출해 주는 문법을 추가해주기 때문에 생성자 호출이 보장된다.
    // 지역변수이기 때문에 main 함수가 종료 될 때, return 0에서 자동으로 소멸자를 호출한다.

    c.SetInt(10);
    // c.m_i = 10; 은 private 처리가 되었기 때문에 SetInt 함수를 통해 접근해야 한다.
    // C++에서는 멤버들과 멤버들의 함수들을 비공개 처리 할 수 있어 멤버 접근을 제한 할 수 있다.

    CMy c2;
    c2.SetInt(100);

    CMy c3;
    c3.SetInt(1000);

    c = c3 = c2;
    // 종단 걸고 f11하면 const CMy& operator =(const CMy& _Other) 함수로 이동된다.
    // 만들지 않아도 클래스 내에서 자동으로 만들어 준다.
    // 그 외의 연산자들은 내가 직접 만들어야 호출이 된다.  클래스에서 오버로딩이라고 한다.
    // 오버로딩 : 같은 이름의 메소드를 여러개 중복 선언하는 것

    int i = 0;
    int i2 = 5;
    int i3 = 10;

    i = i2 = i3; // i3에서 i2로 넣고 그리고 나서 i2 값을 i로 넣겠다.

    return 0;
}